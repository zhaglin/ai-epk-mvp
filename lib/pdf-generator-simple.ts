import { ArtistData } from '@/types';

// Простой PDF генератор с использованием браузерного API
export const generateEPKPDFSimple = async (artistData: ArtistData) => {
  // Проверяем, что мы в браузере
  if (typeof window === 'undefined') {
    throw new Error('PDF generation only works in browser');
  }

  const { name, city, genres, links, generated } = artistData;

  if (!generated) {
    throw new Error('Generated BIO data is missing.');
  }

  try {
    // Создаем HTML контент
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <style>
          @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
          
          body {
            font-family: 'Inter', sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 40px;
            background: white;
          }
          
          .header {
            background: linear-gradient(135deg, #1e3a8a 0%, #3b82f6 100%);
            color: white;
            padding: 40px;
            text-align: center;
            margin-bottom: 30px;
            border-radius: 12px;
          }
          
          .header h1 {
            font-size: 36px;
            font-weight: 700;
            margin-bottom: 10px;
          }
          
          .header .subtitle {
            font-size: 18px;
            opacity: 0.9;
          }
          
          .section {
            margin-bottom: 30px;
            padding: 25px;
            background: #f8fafc;
            border-radius: 8px;
            border-left: 4px solid #3b82f6;
          }
          
          .section h2 {
            font-size: 20px;
            font-weight: 600;
            color: #1e3a8a;
            margin-bottom: 15px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
          }
          
          .section p {
            font-size: 14px;
            line-height: 1.7;
            margin-bottom: 10px;
          }
          
          .highlights {
            list-style: none;
            padding: 0;
          }
          
          .highlights li {
            padding: 8px 0;
            border-bottom: 1px solid #e2e8f0;
            font-size: 14px;
          }
          
          .highlights li:before {
            content: "★ ";
            color: #f59e0b;
            font-weight: bold;
            margin-right: 8px;
          }
          
          .highlights li:last-child {
            border-bottom: none;
          }
          
          .links {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
          }
          
          .link-item {
            padding: 8px 16px;
            background: #e0f2fe;
            color: #0369a1;
            text-decoration: none;
            border-radius: 6px;
            font-size: 13px;
            font-weight: 500;
          }
          
          .footer {
            text-align: center;
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #e2e8f0;
            color: #64748b;
            font-size: 12px;
          }
          
          @media print {
            body { margin: 0; padding: 20px; }
            .header { background: #1e3a8a !important; }
            .section { break-inside: avoid; }
          }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>${name}</h1>
          <div class="subtitle">${city} • ${genres.join(', ')}</div>
        </div>
        
        <div class="section">
          <h2>Elevator Pitch</h2>
          <p>${generated.pitch}</p>
        </div>
        
        <div class="section">
          <h2>Biography</h2>
          <p>${generated.bio}</p>
        </div>
        
        ${generated.highlights && generated.highlights.length > 0 ? `
        <div class="section">
          <h2>Key Highlights</h2>
          <ul class="highlights">
            ${generated.highlights.map(highlight => `<li>${highlight}</li>`).join('')}
          </ul>
        </div>
        ` : ''}
        
        ${Object.values(links).some(link => link) ? `
        <div class="section">
          <h2>Links</h2>
          <div class="links">
            ${links.instagram ? `<div class="link-item">Instagram: ${links.instagram}</div>` : ''}
            ${links.soundcloud ? `<div class="link-item">SoundCloud: ${links.soundcloud}</div>` : ''}
            ${links.mixcloud ? `<div class="link-item">Mixcloud: ${links.mixcloud}</div>` : ''}
            ${links.website ? `<div class="link-item">Website: ${links.website}</div>` : ''}
          </div>
        </div>
        ` : ''}
        
        <div class="footer">
          Generated by AI-EPK • ${new Date().toLocaleDateString('ru-RU')}
        </div>
      </body>
      </html>
    `;

    // Создаем новое окно для печати
    const printWindow = window.open('', '_blank');
    if (!printWindow) {
      throw new Error('Не удалось открыть окно для печати');
    }

    printWindow.document.write(htmlContent);
    printWindow.document.close();

    // Ждем загрузки шрифтов
    await new Promise(resolve => setTimeout(resolve, 1000));

    // Вызываем печать
    printWindow.focus();
    printWindow.print();
    printWindow.close();

    console.log('PDF generated successfully via print dialog!');

  } catch (error) {
    console.error('Error generating PDF:', error);
    throw error;
  }
};
