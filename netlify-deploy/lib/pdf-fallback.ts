import { ArtistData } from '@/types';
import { generateHTMLTemplate } from './pdf-html-template';

// Fallback PDF генератор через внешний API
export async function generatePDFFallback(artistData: ArtistData): Promise<Buffer> {
  const htmlContent = generateHTMLTemplate(artistData);
  
  // Используем HTML/CSS to PDF API (например, HTMLPDF API)
  // В реальном проекте можно использовать DocRaptor, HTMLPDF API, или аналогичные сервисы
  
  try {
    // Пример с HTMLPDF API (бесплатный tier)
    const response = await fetch('https://api.htmlpdfapi.com/v1/pdf', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-API-KEY': process.env.HTMLPDF_API_KEY || '', // Добавить в .env если нужно
      },
      body: JSON.stringify({
        html: htmlContent,
        format: 'A4',
        margin: '24mm',
        printBackground: true,
      }),
    });

    if (!response.ok) {
      throw new Error(`HTMLPDF API error: ${response.status}`);
    }

    const pdfBuffer = await response.arrayBuffer();
    return Buffer.from(pdfBuffer);
    
  } catch (error) {
    console.error('[PDF Fallback] External API failed:', error);
    
    // Если внешний API недоступен, создаем простой текстовый файл
    const textContent = `
EPK - ${artistData.name}
${artistData.city} • ${artistData.genres.join(', ')}

ELEVATOR PITCH:
${artistData.generated?.pitch || ''}

BIOGRAPHY:
${artistData.generated?.bio || ''}

KEY HIGHLIGHTS:
${artistData.generated?.highlights?.map(h => `• ${h}`).join('\n') || ''}

LINKS:
${Object.entries(artistData.links || {})
  .filter(([_, link]) => link)
  .map(([platform, link]) => `${platform}: ${link}`)
  .join('\n')}

Generated by AI-EPK • ${new Date().toLocaleDateString('ru-RU')}
    `.trim();
    
    return Buffer.from(textContent, 'utf-8');
  }
}
