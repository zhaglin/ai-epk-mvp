import { jsPDF } from 'jspdf';
import { ArtistData } from '@/types';

// Автоматический PDF генератор с поддержкой кириллицы
export const generateEPKPDFAuto = async (artistData: ArtistData) => {
  // Проверяем, что мы в браузере
  if (typeof window === 'undefined') {
    throw new Error('PDF generation only works in browser');
  }

  const { name, city, genres, links, generated } = artistData;

  if (!generated) {
    throw new Error('Generated BIO data is missing.');
  }

  try {
    // Создаем новый PDF документ
    const doc = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
    });

    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    const margin = 20;
    const contentWidth = pageWidth - (margin * 2);
    let yPosition = margin;

    // Функция для разбивки текста на строки
    const splitText = (text: string, maxWidth: number, fontSize: number): string[] => {
      doc.setFontSize(fontSize);
      const words = text.split(' ');
      const lines: string[] = [];
      let currentLine = '';

      for (const word of words) {
        const testLine = currentLine + (currentLine ? ' ' : '') + word;
        const testWidth = doc.getTextWidth(testLine);
        
        if (testWidth > maxWidth && currentLine) {
          lines.push(currentLine);
          currentLine = word;
        } else {
          currentLine = testLine;
        }
      }
      
      if (currentLine) {
        lines.push(currentLine);
      }
      
      return lines;
    };

    // Функция для добавления текста с автоматическим переносом
    const addText = (
      text: string,
      fontSize: number = 12,
      isBold: boolean = false,
      color: [number, number, number] = [0, 0, 0]
    ) => {
      doc.setFontSize(fontSize);
      doc.setFont('helvetica', isBold ? 'bold' : 'normal');
      doc.setTextColor(color[0], color[1], color[2]);
      
      const lines = splitText(text, contentWidth, fontSize);
      
      for (const line of lines) {
        if (yPosition > pageHeight - margin - 20) {
          doc.addPage();
          yPosition = margin;
        }
        
        doc.text(line, margin, yPosition);
        yPosition += fontSize * 0.4 + 2;
      }
      
      yPosition += 5; // Дополнительный отступ
    };

    // Header - синий прямоугольник
    doc.setFillColor(30, 58, 138); // Синий цвет
    doc.rect(0, 0, pageWidth, 60, 'F');
    
    // Имя артиста (белый текст в центре)
    doc.setFontSize(28);
    doc.setTextColor(255, 255, 255);
    doc.setFont('helvetica', 'bold');
    const nameWidth = doc.getTextWidth(name);
    doc.text(name, (pageWidth - nameWidth) / 2, yPosition + 15);
    yPosition += 30;

    // Город и жанры (белый текст в центре)
    doc.setFontSize(14);
    doc.setTextColor(255, 255, 255);
    doc.setFont('helvetica', 'normal');
    const subtitleText = `${city} • ${genres.join(', ')}`;
    const subtitleWidth = doc.getTextWidth(subtitleText);
    doc.text(subtitleText, (pageWidth - subtitleWidth) / 2, yPosition + 5);
    yPosition += 30;

    // Elevator Pitch
    addText('ELEVATOR PITCH', 16, true, [30, 58, 138]);
    addText(generated.pitch);

    // Biography
    addText('BIOGRAPHY', 16, true, [30, 58, 138]);
    addText(generated.bio);

    // Highlights
    if (generated.highlights && generated.highlights.length > 0) {
      addText('KEY HIGHLIGHTS', 16, true, [30, 58, 138]);
      generated.highlights.forEach(highlight => {
        addText(`★ ${highlight}`);
      });
    }

    // Links
    const hasLinks = Object.values(links).some(link => link);
    if (hasLinks) {
      addText('LINKS', 16, true, [30, 58, 138]);
      if (links.instagram) addText(`Instagram: ${links.instagram}`, 12, false, [3, 105, 161]);
      if (links.soundcloud) addText(`SoundCloud: ${links.soundcloud}`, 12, false, [3, 105, 161]);
      if (links.mixcloud) addText(`Mixcloud: ${links.mixcloud}`, 12, false, [3, 105, 161]);
      if (links.website) addText(`Website: ${links.website}`, 12, false, [3, 105, 161]);
    }

    // Footer
    if (yPosition > pageHeight - margin - 10) {
      doc.addPage();
      yPosition = margin;
    }
    doc.setFontSize(10);
    doc.setTextColor(150, 150, 150);
    const footerText = `Generated by AI-EPK • ${new Date().toLocaleDateString('ru-RU')}`;
    const footerWidth = doc.getTextWidth(footerText);
    doc.text(footerText, (pageWidth - footerWidth) / 2, pageHeight - margin / 2);

    // Сохраняем PDF
    doc.save(`EPK_${name.replace(/\s+/g, '_')}.pdf`);
    
    console.log('PDF generated and downloaded successfully!');

  } catch (error) {
    console.error('Error generating PDF:', error);
    throw error;
  }
};
